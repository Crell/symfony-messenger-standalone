#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use Doctrine\DBAL\DriverManager;
use Hellpat\Container;
use Hellpat\DispatchTextMessageCommand;
use Hellpat\SyncTextMessage;
use Hellpat\SyncTextMessageHandler;
use Hellpat\AsyncTextMessage;
use Hellpat\AsyncTextMessageHandler;
use Psr\Log\LoggerInterface;
use Psr\Log\LogLevel;
use Symfony\Component\Console\Application;
use Symfony\Component\ErrorHandler\Debug;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpKernel\Log\Logger;
use Symfony\Component\Messenger\Bridge\Doctrine\Transport\Connection;
use Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport;
use Symfony\Component\Messenger\Command\ConsumeMessagesCommand;
use Symfony\Component\Messenger\Command\FailedMessagesRemoveCommand;
use Symfony\Component\Messenger\Command\FailedMessagesRetryCommand;
use Symfony\Component\Messenger\Command\FailedMessagesShowCommand;
use Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener;
use Symfony\Component\Messenger\EventListener\SendFailedMessageToFailureTransportListener;
use Symfony\Component\Messenger\Handler\HandlersLocator;
use Symfony\Component\Messenger\MessageBus;
use Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware;use Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware;
use Symfony\Component\Messenger\Middleware\HandleMessageMiddleware;
use Symfony\Component\Messenger\Middleware\SendMessageMiddleware;
use Symfony\Component\Messenger\Retry\MultiplierRetryStrategy;
use Symfony\Component\Messenger\RoutableMessageBus;
use Symfony\Component\Messenger\Transport\Sender\SendersLocator;
use Symfony\Component\Messenger\Transport\Serialization\PhpSerializer;

Debug::enable();

/** @enum */
final class ServiceIds {
    public const MESSAGE_BUS = 'message_bus';
    public const TRANSPORTS_DEFAULT = 'transport.messages';
    public const TRANSPORTS_FAILED = 'transport.failed_messages';
    public const RETRY_STRATEGY = 'retry_strategy.failed_messages';
}

$services = Container::fromArray([
    ServiceIds::TRANSPORTS_DEFAULT => new DoctrineTransport(
        new Connection([
            'table_name' => 'messages',
            'queue_name' => 'default',
            'auto_setup' => true,
        ], DriverManager::getConnection([
            'url' => 'sqlite:///db.sqlite',
        ])),
        new PhpSerializer()
    ),
    ServiceIds::TRANSPORTS_FAILED => new DoctrineTransport(
        new Connection([
            'table_name' => 'messages',
            'queue_name' => 'failed',
            'auto_setup' => true,
        ], DriverManager::getConnection([
            'url' => 'sqlite:///db.sqlite',
        ])),
        new PhpSerializer()
    ),
    ServiceIds::RETRY_STRATEGY => new MultiplierRetryStrategy(maxRetries: 3),
    LoggerInterface::class => new Logger(LogLevel::DEBUG),
]);

$eventDispatcher = new EventDispatcher();
$eventDispatcher->addSubscriber(
    new SendFailedMessageToFailureTransportListener(
        $services->get(ServiceIds::TRANSPORTS_FAILED),
        $services->get(LoggerInterface::class)
    )
);

$eventDispatcher->addSubscriber(
    new SendFailedMessageForRetryListener(
        $services,
        Container::fromArray([
            // {transport_id} => RetryStrategy
            ServiceIds::TRANSPORTS_DEFAULT => $services->get(ServiceIds::RETRY_STRATEGY)
        ]),
        $services->get(LoggerInterface::class),
        $eventDispatcher
    )
);

$messageBus = new MessageBus([
    // If the message has an SentToFailureTransportStamp (added by the SendFailedMessageToFailureTransportListener)
    // we add an ReceivedStamp (which implements NonSendableStampInterface).
    // So the Failed message cannot be sent again.
    new FailedMessageProcessingMiddleware(),
    new AddBusNameStampMiddleware(ServiceIds::MESSAGE_BUS),
    // Order of the middlewares is important.
    // Depending on the middleware the next middleware MAY get called.
    // If the message CAN be send, the SendMessageMiddleware does not execute
    // subsequent Middlewares
    new SendMessageMiddleware(
        new SendersLocator(
            [
                // The sender handles out AsyncTextMessage but does not
                // handle the SyncTextMessage.
                // The SyncTextMessage will then be passed to the next Middleware.
                // (See new HandleMessageMiddleware(...) some lines later
                AsyncTextMessage::class => [ServiceIds::TRANSPORTS_DEFAULT]
            ],
            $services
        ),
        $eventDispatcher
    ),
    new HandleMessageMiddleware(new HandlersLocator([
        AsyncTextMessage::class => [
            // Every message can have multiple handlers but MUST have at least one handler.
            // You can allow Messages without handler by configuring the
            // HandleMessageMiddlewares second constructor parameter ($allowNoHandlers)
            new AsyncTextMessageHandler($services->get(LoggerInterface::class)),
        ],
        SyncTextMessage::class => [
            new SyncTextMessageHandler($services->get(LoggerInterface::class)),
        ],
    ])),
]);

$application = new Application();

// Registers a command that produced stupid sample messages
$application->add(new DispatchTextMessageCommand($messageBus));

$application->add(new ConsumeMessagesCommand(
    new RoutableMessageBus(
        Container::fromArray([
            ServiceIds::MESSAGE_BUS => $messageBus,
        ]),
        // You can also configure a fallback here
    ),
    $services,
    $eventDispatcher
));

$application->add(new FailedMessagesShowCommand(
    ServiceIds::TRANSPORTS_FAILED,
    $services->get(ServiceIds::TRANSPORTS_FAILED)
));

$application->add(new FailedMessagesRetryCommand(
    ServiceIds::TRANSPORTS_FAILED,
    $services->get(ServiceIds::TRANSPORTS_FAILED),
    $messageBus,
    $eventDispatcher,
    $services->get(LoggerInterface::class)
));

$application->add(new FailedMessagesRemoveCommand(
    ServiceIds::TRANSPORTS_FAILED,
    $services->get(ServiceIds::TRANSPORTS_FAILED)
));

$application->run();